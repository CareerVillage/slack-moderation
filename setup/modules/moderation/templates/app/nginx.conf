<% if scope.lookupvar('moderation::target') == 'dev' %>
upstream moderation_moderation_backend {
    server 127.0.0.1:8000;
}
<% else %>

server {
    listen 80;
    <% if scope.lookupvar('moderation::target') == 'pro' %>
    server_name slack-moderation.com;
    return 301 https://slack-moderation.com$request_uri;
    <% elsif scope.lookupvar('moderation::target') == 'sta' %>
    server_name staging.slack-moderation.com;
    return 301 https://staging.slack-moderation.com$request_uri;
    <% elsif scope.lookupvar('moderation::target') == 'dev' %>
    server_name development.slack-moderation.com;
    return 301 https://development.slack-moderation.com$request_uri;
    <% end %>
}

<% end %>


server {

    <% if scope.lookupvar('moderation::target') == 'dev' %>
    listen 80;
    <% else %>
    listen 443 ssl;
    <% end %>

    <% if scope.lookupvar('moderation::target') == 'pro' %>
    server_name slack-moderation.com;
    <% elsif scope.lookupvar('moderation::target') == 'sta' %>
    server_name staging.slack-moderation.com;
    <% elsif scope.lookupvar('moderation::target') == 'dev' %>
    server_name development.slack-moderation.com;
    <% end %>

    <% if scope.lookupvar('moderation::target') != 'dev' %>
    ssl on;
    ssl_certificate <%= scope.lookupvar('moderation::data_dir') %>/moderation_ssl_crt;
    ssl_certificate_key <%= scope.lookupvar('moderation::data_dir') %>/moderation_ssl_key;
    #enables all versions of TLS, but not SSLv2 or 3 which are weak and now deprecated.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    #Disables all weak ciphers
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    gzip             off;
    gzip_min_length  1000;
    gzip_proxied     any;
    gzip_types       text/css image/png image/jpeg image/jpg application/x-javascript;
    gzip_disable     "MSIE [1-6]\.";

    access_log <%= scope.lookupvar('moderation::log_dir') %>/moderation_nginx_cv_access.log;
    error_log <%= scope.lookupvar('moderation::log_dir') %>/moderation_nginx_cv_error.log;
    <% end %>

    location /favicon.ico {
            root <%= scope.lookupvar('moderation::app_dir') %>/static/img/;
    }

    location /apple-touch-icon-precomposed.png {
            root <%= scope.lookupvar('moderation::app_dir') %>/static/img/;
    }

    <% if scope.lookupvar('moderation::target') == 'dev' %>
    client_max_body_size 4G;
    open_file_cache off;
    sendfile off;
    keepalive_timeout 5;

    location ~* / {
        proxy_redirect   off;
        proxy_set_header Host             $host:8000;
        proxy_set_header X-Real-IP        $remote_addr;
        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header X-Magic-Header   "secret";
        proxy_set_header X-Forwarded-Protocol http;

        proxy_pass http://moderation_moderation_backend;
    }

    <% else %>
    <% if scope.lookupvar('moderation::target') == 'pro' and scope.lookupvar('moderation::role') == 'slave' %>
    location /static/xml/volunteer_opportunities_linkedin.xml {
         proxy_pass https://ip-10-237-255-234.ec2.internal;
         proxy_set_header Host      $host;
         proxy_set_header X-Real-IP $remote_addr;
    }
    <% end %>

    location /static/ {
        alias <%= scope.lookupvar('moderation::app_dir') %>/static/;
    }

    location /media/ {
        alias <%= scope.lookupvar('moderation::app_dir') %>/media/;
    }

    location /moderations/moderations {
        proxy_set_header X-Forwarded-Proto https;
        uwsgi_param UWSGI_SCHEME https;
        uwsgi_pass_header X_FORWARDED_PROTO;
        uwsgi_pass unix:<%= scope.lookupvar('moderation::run_dir') %>/moderation_uwsgi.sock;
        include /etc/nginx/uwsgi_params;
        auth_basic "Restricted";                                #For Basic Auth
        auth_basic_user_file /etc/nginx/.htpasswd;
        # .htpasswd file is not generated by the installation script
        # It must be manually generated. User and password must match
        # what's configured on Career Village or any other client applications.
    }

    location / {
        proxy_set_header X-Forwarded-Proto https;
        uwsgi_param UWSGI_SCHEME https;
        uwsgi_pass_header X_FORWARDED_PROTO;
        uwsgi_pass unix:<%= scope.lookupvar('moderation::run_dir') %>/moderation_uwsgi.sock;
        include /etc/nginx/uwsgi_params;
    }


    <% end %>
}
